import React, { useState, useEffect, useCallback } from "react";
import { LoginRequiredPage } from "components/LoginRequiredPage";
import { useCurrentUser } from "app";
import brain from "brain";
import {
  TurnstileValidationRequest,
  TurnstileValidationResponse,
  DomainConfigInput as BrainDomainConfigInput, // Renaming to avoid clash
  ConfigureDomainRequest, // For the new domain setup endpoint
  DomainConfig, // Assuming this type is generated by the backend for GET response
  // Campaign related types from backend
  CampaignConfig as BrainCampaignConfig,
  CampaignFiltersModel as BrainCampaignFiltersModel,
  CampaignCreateRequest as BrainCampaignCreateRequest,
  CampaignsListResponse as BrainCampaignsListResponse,
  CampaignBriefResponse as BrainCampaignBriefResponse,
  CampaignUpdateRequest as BrainCampaignUpdateRequest,
  CampaignDeleteResponse as BrainCampaignDeleteResponse
} from "types"; 
import { toast } from "sonner";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea"; // For blocked countries
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Table,
  TableHeader,
  TableBody,
  TableRow,
  TableHead,
  TableCell,
  TableCaption,
} from "@/components/ui/table";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"; // Added Select
import { Trash2, Edit3, PlusCircle } from "lucide-react"; // Icons

// Declare an interface for the window object to include turnstile and handleTurnstileSuccess
declare global {
  interface Window {
    turnstile?: {
      render: (container: string | HTMLElement, params: TurnstileWidgetParams) => void;
      reset: (widgetIdOrContainer: string | HTMLElement) => void;
    };
    handleTurnstileSuccess?: (token: string) => void;
  }
}

interface TurnstileWidgetParams {
  sitekey: string;
  callback: (token: string) => void;
}

interface CloudflareAccountDisplay {
  account_id: string; // Changed from email_identifier to account_id for the key
  display_name: string; // This will hold the email_identifier or fallback
  status: string;
}

// Local state type for form, separate from brain type if needed for parsing (e.g. blocked_countries as string)
interface DomainConfigFormState {
  domain_name: string;
  white_page_url: string;
  black_page_url: string;
  blocked_countries_str: string; // Comma-separated string
}

interface AccessLogEntry {
  id: string;
  timestamp: string;
  ipAddress: string; 
  userAgent: string;
  status: "Permitido - Humano" | "Bloqueado - Bot" | "Pendente";
  destinationUrl: string; 
  reason?: string; 
}

// Define a more specific type for campaigns in the frontend state if needed
// BrainCampaignConfig already includes created_at and updated_at
interface CampaignUIData extends BrainCampaignConfig {
  path: string; // The campaign path (key from the backend campaigns dictionary)
}


const mockAccessLogs: AccessLogEntry[] = [
  { id: "1", timestamp: "2025-06-03 15:50:12", ipAddress: "ce4b1f...a2", userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X)", status: "Permitido - Humano", destinationUrl: "/black-url-final" },
  { id: "2", timestamp: "2025-06-03 15:48:33", ipAddress: "9fde2a...b7", userAgent: "Googlebot/2.1", status: "Bloqueado - Bot", destinationUrl: "/white-url-segura", reason: "User-Agent: Googlebot"},
];

const DashboardContent: React.FC = () => {
  const { user, loading: userLoading } = useCurrentUser();

  // State for domain configurations
  const [domainConfigs, setDomainConfigs] = useState<Record<string, DomainConfig>>({}); // { "domain.com": { white_page_url: ..., black_page_url: ...}}
  const [isDomainConfigsLoading, setIsDomainConfigsLoading] = useState<boolean>(true);
  const [domainConfigError, setDomainConfigError] = useState<string | null>(null);
  
  const initialFormState: DomainConfigFormState = {
    domain_name: "",
    white_page_url: "",
    black_page_url: "",
    blocked_countries_str: "",
  };
  const [currentDomainForm, setCurrentDomainForm] = useState<DomainConfigFormState>(initialFormState);
  const [isEditingDomain, setIsEditingDomain] = useState<string | null>(null); // Stores domain_name if editing
  const [isSavingDomain, setIsSavingDomain] = useState<boolean>(false);
  const [isConfiguringDomain, setIsConfiguringDomain] = useState<boolean>(false); // New state for CF setup

  // State for Campaigns
  const [campaignWhiteContentType, setCampaignWhiteContentType] = useState<"html" | "url">("html");
  const [campaignWhiteContentValue, setCampaignWhiteContentValue] = useState<string>("<html>\n  <head>\n    <title>PÃ¡gina Segura</title>\n  </head>\n  <body>\n    <h1>PÃ¡gina em ManutenÃ§Ã£o</h1>\n    <p>Estamos trabalhando para melhorar nossos serviÃ§os. Volte em breve!</p>\n  </body>\n</html>");
  const [campaignBlackContentType, setCampaignBlackContentType] = useState<"html" | "url">("html");
  const [campaignBlackContentValue, setCampaignBlackContentValue] = useState<string>("<html>\n  <head>\n    <title>Oferta Especial</title>\n  </head>\n  <body>\n    <h1>ðŸŽ‰ Oferta Exclusiva para VocÃª! ðŸŽ‰</h1>\n    <p>Clique aqui para aproveitar nosso desconto especial por tempo limitado.</p>\n    <a href=\"#\">Quero a Oferta!</a>\n  </body>\n</html>");
  const [campaignDeviceTarget, setCampaignDeviceTarget] = useState<"all" | "mobile" | "desktop">("all");
  const [selectedDomainForCampaigns, setSelectedDomainForCampaigns] = useState<string>("");
  const [campaignPath, setCampaignPath] = useState<string>("");
  const [campaignWhiteContent, setCampaignWhiteContent] = useState<string>("<html>\n  <head>\n    <title>PÃ¡gina Segura</title>\n  </head>\n  <body>\n    <h1>PÃ¡gina em ManutenÃ§Ã£o</h1>\n    <p>Estamos trabalhando para melhorar nossos serviÃ§os. Volte em breve!</p>\n  </body>\n</html>");
  const [campaignBlackContent, setCampaignBlackContent] = useState<string>("<html>\n  <head>\n    <title>Oferta Especial</title>\n  </head>\n  <body>\n    <h1>ðŸŽ‰ Oferta Exclusiva para VocÃª! ðŸŽ‰</h1>\n    <p>Clique aqui para aproveitar nosso desconto especial por tempo limitado.</p>\n    <a href=\"#\">Quero a Oferta!</a>\n  </body>\n</html>");
  const [campaignUserAgentFilters, setCampaignUserAgentFilters] = useState<string>("Googlebot, Bingbot, YandexBot, DuckDuckBot");
  const [campaignCountryFilters, setCampaignCountryFilters] = useState<string>("CN, RU, KP, IR, SY");
  const [isSavingCampaign, setIsSavingCampaign] = useState<boolean>(false);
  // TODO: Add state for listing campaigns, editing campaign etc.
  const [currentCampaigns, setCurrentCampaigns] = useState<CampaignUIData[]>([]);
  const [isLoadingCampaigns, setIsLoadingCampaigns] = useState<boolean>(false);
  const [editingCampaignPath, setEditingCampaignPath] = useState<string | null>(null); // Stores the path of the campaign being edited
  const [isEditModeCampaign, setIsEditModeCampaign] = useState<boolean>(false);


  // State for Cloudflare accounts
  const [cloudflareAccounts, setCloudflareAccounts] = useState<CloudflareAccountDisplay[]>([]);
  const [selectedCloudflareAccountId, setSelectedCloudflareAccountId] = useState<string>("");
  const [isLoadingCfAccounts, setIsLoadingCfAccounts] = useState<boolean>(true);

  // --- Campaign Management Logic ---
  const fetchCampaignsForDomain = useCallback(async (domainName: string) => {
    if (!user || userLoading || !domainName) {
      setCurrentCampaigns([]);
      return;
    }
    setIsLoadingCampaigns(true);
    try {
      console.log(`Fetching campaigns for domain: ${domainName}`);
      const response = await brain.list_campaigns_for_domain({ domain_name: domainName });
      const data: BrainCampaignsListResponse = await response.json(); 
      console.log("Campaigns data received:", data);

      if (response.ok) {
        const uiCampaigns: CampaignUIData[] = data.campaigns.map(campaign => ({
            ...campaign,
        }));
        setCurrentCampaigns(uiCampaigns);
        toast.success(`Campanhas para ${domainName} carregadas.`);
      } else {
        const errorMsg = (data as any)?.detail || `Falha ao carregar campanhas para ${domainName}.`;
        toast.error(errorMsg);
        setCurrentCampaigns([]);
      }
    } catch (err: any) {
      console.error("Error fetching campaigns:", err);
      toast.error(err.message || "Erro de rede ao buscar campanhas.");
      setCurrentCampaigns([]);
    }
    finally {
          setIsLoadingCampaigns(false);
    }
  }, [user, userLoading]);

  const handleDeleteCampaign = async (domainName: string, campaignPath: string) => {
    if (!user || userLoading) {
      toast.error("VocÃª precisa estar logado para excluir uma campanha.");
      return;
    }
    if (!window.confirm(`Tem certeza que deseja excluir a campanha "/${campaignPath}" do domÃ­nio "${domainName}"? Esta aÃ§Ã£o nÃ£o pode ser desfeita.`)) {
      return;
    }

    setIsSavingCampaign(true); // Reuse saving state for loading indication
    try {
      console.log(`Attempting to delete campaign: ${campaignPath} for domain ${domainName}`);
      const response = await brain.delete_campaign({ domain_name: domainName, path: campaignPath });
      const data: BrainCampaignDeleteResponse = await response.json();

      if (response.ok) {
        toast.success(data.message || "Campanha excluÃ­da com sucesso!");
        fetchCampaignsForDomain(domainName); // Refresh list for the current domain
        // If the deleted campaign was being edited, cancel edit mode
        if (isEditModeCampaign && editingCampaignPath === campaignPath && selectedDomainForCampaigns === domainName) {
          handleCancelCampaignEdit();
        }
      } else {
        const errorMsg = (data as any)?.detail || "Falha ao excluir campanha.";
        toast.error(errorMsg);
      }
    } catch (err: any) {
      console.error("Error deleting campaign:", err);
      toast.error(err.message || "Erro de rede ao excluir campanha.");
    } finally {
      setIsSavingCampaign(false);
    }
  };

  const handleEditCampaignClick = (campaign: CampaignUIData) => {
    setIsEditModeCampaign(true);
    setEditingCampaignPath(campaign.path);
    setSelectedDomainForCampaigns(campaign.domain_name); // Ensure the correct domain is selected
    setCampaignPath(campaign.path);

    // Populate new content type and value fields
    setCampaignWhiteContentType(campaign.content_white?.type || "html");
    setCampaignWhiteContentValue(campaign.content_white?.value || "");
    setCampaignBlackContentType(campaign.content_black?.type || "html");
    setCampaignBlackContentValue(campaign.content_black?.value || "");
    setCampaignDeviceTarget(campaign.filters?.device_target || "all");

    setCampaignUserAgentFilters((campaign.filters?.user_agent_contains_block || []).join(", "));
    setCampaignCountryFilters((campaign.filters?.geo_country_block || []).join(", "));
    
    const campaignForm = document.getElementById('campaign-form-section');
    if (campaignForm) {
      campaignForm.scrollIntoView({ behavior: 'smooth' });
    }
    toast.info(`Editando campanha: ${campaign.path} no domÃ­nio ${campaign.domain_name}`);
  };

  const handleCancelCampaignEdit = () => {
    setIsEditModeCampaign(false);
    setEditingCampaignPath(null);
    setCampaignPath("");

    // Reset new content type and value fields
    setCampaignWhiteContentType("html");
    setCampaignWhiteContentValue("<html>\n  <head>\n    <title>PÃ¡gina Segura</title>\n  </head>\n  <body>\n    <h1>PÃ¡gina em ManutenÃ§Ã£o</h1>\n    <p>Estamos trabalhando para melhorar nossos serviÃ§os. Volte em breve!</p>\n  </body>\n</html>");
    setCampaignBlackContentType("html");
    setCampaignBlackContentValue("<html>\n  <head>\n    <title>Oferta Especial</title>\n  </head>\n  <body>\n    <h1>ðŸŽ‰ Oferta Exclusiva para VocÃª! ðŸŽ‰</h1>\n    <p>Clique aqui para aproveitar nosso desconto especial por tempo limitado.</p>\n    <a href=\"#\">Quero a Oferta!</a>\n  </body>\n</html>");
    setCampaignDeviceTarget("all");

    setCampaignUserAgentFilters("Googlebot, Bingbot, YandexBot, DuckDuckBot");
    setCampaignCountryFilters("CN, RU, KP, IR, SY");
  };

  const handleSaveCampaign = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    if (!user || userLoading) {
      toast.error("VocÃª precisa estar logado para salvar uma campanha.");
      return;
    }
    if (!selectedDomainForCampaigns) {
      toast.error("Selecione um domÃ­nio para associar a campanha.");
      return;
    }
    if (!campaignPath) {
      toast.error("O path da campanha Ã© obrigatÃ³rio.");
      return;
    }
    // Validate content values based on type
    if (campaignWhiteContentType === 'url' && !campaignWhiteContentValue.startsWith('http')) {
      toast.error("URL da White Page invÃ¡lida. Deve comeÃ§ar com http ou https.");
      return;
    }
    if (campaignBlackContentType === 'url' && !campaignBlackContentValue.startsWith('http')) {
      toast.error("URL da Black Page invÃ¡lida. Deve comeÃ§ar com http ou https.");
      return;
    }
    if (campaignWhiteContentType === 'html' && !campaignWhiteContentValue.trim()) {
      toast.error("ConteÃºdo HTML da White Page nÃ£o pode ser vazio.");
      return;
    }
    if (campaignBlackContentType === 'html' && !campaignBlackContentValue.trim()) {
      toast.error("ConteÃºdo HTML da Black Page nÃ£o pode ser vazio.");
      return;
    }

    setIsSavingCampaign(true);

    try {
      let response;
      let successMessage = "";

      const campaignDataForApi = {
        content_white: {
          type: campaignWhiteContentType,
          value: campaignWhiteContentValue,
        },
        content_black: {
          type: campaignBlackContentType,
          value: campaignBlackContentValue,
        },
        filters: {
          user_agent_contains_block: campaignUserAgentFilters.split(',').map(s => s.trim()).filter(s => s),
          geo_country_block: campaignCountryFilters.split(',').map(s => s.trim().toUpperCase()).filter(s => s),
          device_target: campaignDeviceTarget,
        },
      };

      if (isEditModeCampaign && editingCampaignPath && selectedDomainForCampaigns) {
        console.log(`Attempting to update campaign: ${editingCampaignPath} for domain ${selectedDomainForCampaigns}`);
        // Ensure type compatibility for BrainCampaignUpdateRequest
        const updatePayload: Omit<BrainCampaignUpdateRequest, 'domain_name' | 'path'> = campaignDataForApi;
        response = await brain.update_campaign({ domain_name: selectedDomainForCampaigns, path: editingCampaignPath }, updatePayload);
        successMessage = "Campanha atualizada com sucesso!";
      } else if (!isEditModeCampaign && selectedDomainForCampaigns && campaignPath.trim()) {
        console.log(`Attempting to create campaign: ${campaignPath.trim()} for domain ${selectedDomainForCampaigns}`);
        // Ensure type compatibility for BrainCampaignCreateRequest
        const createPayload: BrainCampaignCreateRequest = {
          domain_name: selectedDomainForCampaigns,
          path: campaignPath.trim().replace(/^\/+|\/+$/g, ''), // Sanitize path
          ...campaignDataForApi,
        };
        response = await brain.create_campaign(createPayload);
        successMessage = "Campanha criada com sucesso!";
      } else {
        toast.error("InformaÃ§Ãµes incompletas para salvar a campanha.");
        setIsSavingCampaign(false);
        return;
      }

      if (response) {
        const data = await response.json();
        if (response.ok) {
          toast.success(successMessage);
          if (selectedDomainForCampaigns) fetchCampaignsForDomain(selectedDomainForCampaigns); // Refresh list
          handleCancelCampaignEdit(); // Reset form and edit mode
        } else {
          const errorMsg = (data as any)?.detail || "Falha ao salvar campanha.";
          toast.error(errorMsg);
        }
      }
    } catch (err: any) {
      console.error("Error saving campaign:", err);
      toast.error(err.message || "Erro de rede ao salvar campanha.");
    } finally {
      setIsSavingCampaign(false);
    }
  };

  useEffect(() => {
    if (selectedDomainForCampaigns) {
      fetchCampaignsForDomain(selectedDomainForCampaigns);
    }
  }, [selectedDomainForCampaigns, fetchCampaignsForDomain]);

  // Existing state for Turnstile and old global URL config (to be phased out or re-purposed)
  const [isTurnstileScriptLoaded, setIsTurnstileScriptLoaded] = useState(false);

  // --- Turnstile Logic (largely unchanged) ---
  const handleTurnstileToken = useCallback(async (token: string) => {
    console.log("Turnstile token received:", token);
    toast.info("Verificando token...", { id: "turnstile-validation" });
    try {
      const payload: TurnstileValidationRequest = { token };
      const response = await brain.validate_turnstile_token(payload);
      const data: TurnstileValidationResponse = await response.json();
      if (response.ok && data.success) {
        toast.success(`VerificaÃ§Ã£o bem-sucedida! Hostname: ${data.hostname || 'N/A'}`, {
          id: "turnstile-validation",
        });
      } else {
        const errorMsg = data.error_codes && data.error_codes.length > 0 ? data.error_codes.join(', ') : "Falha na verificaÃ§Ã£o";
        toast.error(`Falha na verificaÃ§Ã£o: ${errorMsg}`, { id: "turnstile-validation" });
        if (window.turnstile && typeof window.turnstile.reset === 'function') {
          const widgetElement = document.querySelector('.cf-turnstile');
          if (widgetElement) window.turnstile.reset(widgetElement as HTMLElement);
        }
      }
    } catch (err: any) {
      toast.error("Erro ao contatar o servidor para validaÃ§Ã£o do token.", { id: "turnstile-validation" });
    }
  }, []);

  useEffect(() => {
    const scriptId = "cf-turnstile-script";
    window.handleTurnstileSuccess = handleTurnstileToken;
    if (document.getElementById(scriptId) || window.turnstile) {
      setIsTurnstileScriptLoaded(true);
      if (window.turnstile && typeof window.turnstile.render === 'function') {
        const turnstileContainer = document.getElementById('turnstile-widget-container');
        if (turnstileContainer && !turnstileContainer.querySelector('iframe')) {
            window.turnstile.render('#turnstile-widget-container', {
                sitekey: '0x4AAAAAABeN7EeFcxsslk_G',
                callback: window.handleTurnstileSuccess,
            });
        }
      }
      return;
    }
    const script = document.createElement("script");
    script.id = scriptId;
    script.src = "https://challenges.cloudflare.com/turnstile/v0/api.js?onload=onTurnstileScriptLoaded";
    script.async = true; script.defer = true;
    (window as any).onTurnstileScriptLoaded = () => {
        setIsTurnstileScriptLoaded(true);
        const turnstileContainer = document.getElementById('turnstile-widget-container');
        if (turnstileContainer && !turnstileContainer.querySelector('iframe') && window.turnstile) {
             window.turnstile.render('#turnstile-widget-container', {
                sitekey: '0x4AAAAAABeN7EeFcxsslk_G',
                callback: window.handleTurnstileSuccess,
            });
        }
    };
    document.head.appendChild(script);
    return () => {
      delete window.handleTurnstileSuccess;
      delete (window as any).onTurnstileScriptLoaded;
    };
  }, [handleTurnstileToken]);

  // --- Domain Configuration CRUD Logic ---
  const fetchDomainConfigs = useCallback(async () => {
    if (!user || userLoading) return;
    setIsDomainConfigsLoading(true);
    setDomainConfigError(null);
    try {
      const response = await brain.get_all_domain_configs(); // Uses new endpoint
      const data: Record<string, DomainConfig> = await response.json();
      if (response.ok) {
        setDomainConfigs(data || {});
        toast.success("ConfiguraÃ§Ãµes de domÃ­nio carregadas!");
      } else {
        const errorData = data as any;
        const msg = errorData?.detail || "Falha ao carregar configuraÃ§Ãµes de domÃ­nio.";
        setDomainConfigError(msg);
        toast.error(msg);
      }
    } catch (err: any) {
      const msg = err.message || "Erro de rede ao buscar configuraÃ§Ãµes de domÃ­nio.";
      setDomainConfigError(msg);
      toast.error(msg);
    } finally {
      setIsDomainConfigsLoading(false);
    }
  }, [user, userLoading]);

  // Fetch Cloudflare Accounts
  const fetchCloudflareAccounts = useCallback(async () => {
    if (!user || userLoading) return;
    setIsLoadingCfAccounts(true);
    try {
      // Assuming brain.get_cloudflare_accounts() is the correct new client method
      const response = await brain.get_cloudflare_accounts_configured(); 
      const data: Record<string, {email_identifier: string, status: string}> = await response.json();
      if (response.ok) {
        const accountsArray = Object.entries(data).map(([id, acc]) => ({
          account_id: id,
          display_name: acc.email_identifier || `Account ID: ${id.substring(0,8)}...`,
          status: acc.status,
        }));
        setCloudflareAccounts(accountsArray.filter(acc => acc.status === "verified")); // Only show verified accounts
        if (accountsArray.length > 0 && accountsArray.filter(acc => acc.status === "verified").length > 0) {
          setSelectedCloudflareAccountId(accountsArray.filter(acc => acc.status === "verified")[0].account_id);
        } else {
          toast.info("Nenhuma conta Cloudflare verificada encontrada. Adicione e verifique uma conta primeiro.");
        }
        
      } else {
        const errorData = data as any;
        toast.error(errorData?.detail || "Falha ao carregar contas Cloudflare.");
      }
    } catch (err: any) {
      toast.error(err.message || "Erro de rede ao buscar contas Cloudflare.");
    } finally {
      setIsLoadingCfAccounts(false);
    }
  }, [user, userLoading]);

  useEffect(() => {
    // Fetch initial data only when the user is available
    if (user && !userLoading) {
        fetchDomainConfigs();
        fetchCloudflareAccounts();
    }
  }, [user, userLoading, fetchDomainConfigs, fetchCloudflareAccounts]);

  useEffect(() => {
    // This effect runs when domainConfigs changes, to set the default selected domain for campaigns
    if (Object.keys(domainConfigs).length > 0 && !selectedDomainForCampaigns) {
      const firstDomain = Object.keys(domainConfigs)[0];
      console.log("Setting selectedDomainForCampaigns to:", firstDomain);
      setSelectedDomainForCampaigns(firstDomain);
    }
    // If all domain configs are removed, reset selectedDomainForCampaigns
    else if (Object.keys(domainConfigs).length === 0 && selectedDomainForCampaigns) {
        console.log("Resetting selectedDomainForCampaigns as no domains are configured.");
        setSelectedDomainForCampaigns("");
    }
  }, [domainConfigs, selectedDomainForCampaigns]); // Removed fetchCampaignsForDomain from here to avoid loops if it modifies selectedDomainForCampaigns indirectly

  const handleDomainFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setCurrentDomainForm({
      ...currentDomainForm,
      [e.target.name]: e.target.value,
    });
  };

  const handleSaveDomainConfig = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!user) {
      toast.error("VocÃª precisa estar logado.");
      return;
    }
    if (!currentDomainForm.domain_name.trim()) {
        toast.error("Nome do DomÃ­nio Ã© obrigatÃ³rio.");
        return;
    }
    if (!isEditingDomain && !selectedCloudflareAccountId) {
        toast.error("Selecione uma Conta Cloudflare para configurar um novo domÃ­nio.");
        return;
    }
    // Fields white_page_url and black_page_url are only strictly required if editing an existing domain's details.
    // For a new domain configuration, these might be set in a subsequent step for a default path/campaign.
    if (isEditingDomain && (!currentDomainForm.white_page_url.trim() || !currentDomainForm.black_page_url.trim())) {
        toast.error("Nome do domÃ­nio, URL White e URL Black sÃ£o obrigatÃ³rios.");
        return;
    }

    if (isEditingDomain) {
      setIsSavingDomain(true);
    } else {
      setIsConfiguringDomain(true);
    }
    const payload: BrainDomainConfigInput = {
      domain_name: currentDomainForm.domain_name.trim().toLowerCase(),
      white_page_url: currentDomainForm.white_page_url.trim(),
      black_page_url: currentDomainForm.black_page_url.trim(),
      blocked_countries: currentDomainForm.blocked_countries_str.split(",").map(c => c.trim().toUpperCase()).filter(c => c.length === 2),
    };

    if (isEditingDomain) {
      // This branch handles UPDATING white/black URLs for an ALREADY configured domain.
      // In the future, this will be part of campaign/path management.
      try {
        const response = await brain.update_single_domain_config(payload); // `payload` defined above
        const data = await response.json();
        if (response.ok) {
          toast.success(data.message || `Detalhes do domÃ­nio ${isEditingDomain} atualizados!`);
          fetchDomainConfigs(); // Refresh list
          setCurrentDomainForm(initialFormState);
          setIsEditingDomain(null);
        } else {
          const errorDetail = (data as any)?.detail || `Falha ao atualizar detalhes do domÃ­nio.`;
          toast.error(errorDetail);
        }
      } catch (err: any) {
        toast.error(err.message || `Erro de rede ao atualizar o domÃ­nio.`);
      } finally {
        setIsSavingDomain(false);
      }
    } else {
      // This branch handles ADDING a NEW domain for Cloudflare setup.
      if (!selectedCloudflareAccountId) {
          toast.error("Conta Cloudflare Ã© obrigatÃ³ria para adicionar um novo domÃ­nio.");
          setIsConfiguringDomain(false);
          return;
      }
      const configurePayload: ConfigureDomainRequest = {
        domain_name: currentDomainForm.domain_name.trim().toLowerCase(),
        cloudflare_account_id: selectedCloudflareAccountId,
      };
      try {
        const response = await brain.configure_domain_endpoint(configurePayload);
        const data = await response.json(); 
        if (response.ok) {
          toast.success(data.message || `DomÃ­nio ${configurePayload.domain_name} enviado para configuraÃ§Ã£o. Isso pode levar alguns minutos.`);
          setCurrentDomainForm(initialFormState);
          // fetchDomainConfigs(); // Consider if fetching immediately is desired or if a pending state is better
          // setSelectedCloudflareAccountId(""); // Reset selected CF account
        } else {
          const errorDetail = (data as any)?.detail || "Falha ao iniciar configuraÃ§Ã£o do domÃ­nio.";
          toast.error(errorDetail);
        }
      } catch (err: any) {
        toast.error(err.message || "Erro de rede ao configurar o domÃ­nio.");
      } finally {
        setIsConfiguringDomain(false);
      }
    }
  };

  const handleEditDomain = (domainName: string) => {
    const config = domainConfigs[domainName];
    if (config) {
      setCurrentDomainForm({
        domain_name: domainName, // Keep original casing for display if preferred, but save as lower
        white_page_url: config.white_page_url,
        black_page_url: config.black_page_url,
        blocked_countries_str: (config.blocked_countries || []).join(", "),
      });
      setIsEditingDomain(domainName);
      window.scrollTo({ top: document.getElementById('domain-config-form')?.offsetTop || 0, behavior: 'smooth' });
    }
  };
  
  const handleCancelEdit = () => {
    setCurrentDomainForm(initialFormState);
    setIsEditingDomain(null);
  };

  const handleDeleteDomain = async (domainName: string) => {
    if (!user) {
      toast.error("VocÃª precisa estar logado.");
      return;
    }
    if (!confirm(`Tem certeza que deseja remover a configuraÃ§Ã£o para o domÃ­nio ${domainName}?`)) {
      return;
    }
    setIsSavingDomain(true); // Reuse saving state for visual feedback
    try {
      const response = await brain.delete_single_domain_config({ domain_name: domainName });
      const data = await response.json();
      if (response.ok) {
        toast.success(data.message || "DomÃ­nio removido com sucesso!");
        fetchDomainConfigs(); // Refresh list
      } else {
        const errorDetail = (data as any)?.detail || "Falha ao remover domÃ­nio.";
        toast.error(errorDetail);
      }
    } catch (err: any) {
      toast.error(err.message || "Erro de rede ao remover o domÃ­nio.");
    } finally {
      setIsSavingDomain(false);
    }
  };

  // --- Loading State ---
  if (userLoading || (isDomainConfigsLoading && Object.keys(domainConfigs).length === 0 && !isTurnstileScriptLoaded)) {
    return (
      <div className="flex justify-center items-center min-h-screen bg-gray-900 text-white">
        <p>Carregando dados do dashboard e componentes de seguranÃ§a...</p>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-900 text-white p-4 md:p-8">
      <header className="mb-10">
        <h1 className="text-5xl font-bold text-center md:text-left text-cyan-400 tracking-wider">Phantom Shield Dashboard</h1>
        <p className="text-xl text-gray-400 text-center md:text-left mt-2 font-light">Painel de controle e monitoramento avanÃ§ado.</p>
      </header>

      <div className="space-y-12">
        {/* Section for Per-Domain Cloaking Configuration */}
        <section id="domain-configuration">
          <Card id="domain-config-form" className="w-full bg-gray-800 border border-cyan-500/30 shadow-[0_0_15px_rgba(0,255,255,0.2)] hover:shadow-[0_0_25px_rgba(0,255,255,0.35)] transition-shadow duration-300">
            <CardHeader>
              <CardTitle className="text-2xl font-semibold text-cyan-300 tracking-wide">
                {isEditingDomain ? `Editando DomÃ­nio: ${isEditingDomain}` : "Adicionar Nova ConfiguraÃ§Ã£o de DomÃ­nio"}
              </CardTitle>
              <CardDescription className="text-gray-400">
                Configure as URLs White/Black e regras de geobloqueio para cada domÃ­nio.
              </CardDescription>
            </CardHeader>
            <form onSubmit={handleSaveDomainConfig}>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-2">
                    <Label htmlFor="domain_name" className="text-gray-300">Nome do DomÃ­nio (ex: meudominio.com)</Label>
                    <Input
                      id="domain_name"
                      name="domain_name"
                      type="text"
                      placeholder="seu-dominio.com"
                      value={currentDomainForm.domain_name}
                      onChange={handleDomainFormChange}
                      required
                      className="bg-gray-700 border-gray-600 text-white placeholder-gray-500 focus:ring-cyan-500 focus:border-cyan-500"
                      disabled={isSavingDomain || isConfiguringDomain || !!isEditingDomain} // Disable if editing to prevent changing the key
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="cloudflare_account" className="text-gray-300">Conta Cloudflare Associada</Label>
                    <Select
                        value={selectedCloudflareAccountId}
                        onValueChange={setSelectedCloudflareAccountId}
                        disabled={isSavingDomain || isConfiguringDomain || isLoadingCfAccounts || !!isEditingDomain}
                    >
                        <SelectTrigger className="w-full bg-gray-700 border-gray-600 text-white focus:ring-cyan-500 focus:border-cyan-500">
                            <SelectValue placeholder={isLoadingCfAccounts ? "Carregando contas..." : "Selecione uma conta Cloudflare"} />
                        </SelectTrigger>
                        <SelectContent className="bg-gray-700 text-white border-gray-600">
                            {cloudflareAccounts.map((acc) => (
                                <SelectItem key={acc.account_id} value={acc.account_id} className="hover:bg-gray-600 focus:bg-gray-600">
                                    {acc.display_name} ({acc.status})
                                </SelectItem>
                            ))}
                            {cloudflareAccounts.length === 0 && !isLoadingCfAccounts && (
                                <div className="p-2 text-center text-gray-400">Nenhuma conta verificada.</div>
                            )}
                        </SelectContent>
                    </Select>
                  </div>
                   <div className="space-y-2">
                    <Label htmlFor="blocked_countries_str" className="text-gray-300">PaÃ­ses Bloqueados (cÃ³digos de 2 letras, separados por vÃ­rgula, ex: CN,RU)</Label>
                    <Textarea
                      id="blocked_countries_str"
                      name="blocked_countries_str"
                      placeholder="KP, IR, SY"
                      value={currentDomainForm.blocked_countries_str}
                      onChange={handleDomainFormChange}
                      className="bg-gray-700 border-gray-600 text-white placeholder-gray-500 focus:ring-cyan-500 focus:border-cyan-500 h-24"
                      disabled={isSavingDomain || isConfiguringDomain}
                    />
                  </div>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-2">
                    <Label htmlFor="white_page_url" className="text-gray-300">White Page URL (Segura)</Label>
                    <Input
                      id="white_page_url"
                      name="white_page_url"
                      type="url"
                      placeholder="https://pagina-segura.com/fallback"
                      value={currentDomainForm.white_page_url}
                      onChange={handleDomainFormChange}
                      required
                      className="bg-gray-700 border-gray-600 text-white placeholder-gray-500 focus:ring-cyan-500 focus:border-cyan-500"
                      disabled={isSavingDomain}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="black_page_url" className="text-gray-300">Black Page URL (Oferta)</Label>
                    <Input
                      id="black_page_url"
                      name="black_page_url"
                      type="url"
                      placeholder="https://pagina-oferta.com/principal"
                      value={currentDomainForm.black_page_url}
                      onChange={handleDomainFormChange}
                      required
                      className="bg-gray-700 border-gray-600 text-white placeholder-gray-500 focus:ring-cyan-500 focus:border-cyan-500"
                      disabled={isSavingDomain}
                    />
                  </div>
                </div>
                {domainConfigError && <p className="mt-4 text-sm font-medium text-red-500">Erro: {domainConfigError}</p>}
              </CardContent>
              <CardFooter className="border-t border-gray-700 pt-6 flex justify-end gap-4">
                {isEditingDomain && (
                    <Button type="button" variant="outline" onClick={handleCancelEdit} disabled={isSavingDomain} className="text-gray-300 border-gray-600 hover:bg-gray-700">
                        Cancelar EdiÃ§Ã£o
                    </Button>
                )}
                <Button type="submit" disabled={isSavingDomain || isConfiguringDomain || isDomainConfigsLoading} className="bg-cyan-500 hover:bg-cyan-400 text-gray-900 font-bold py-3 px-6 rounded-lg shadow-md hover:shadow-cyan-500/40 transition-all duration-300 ease-in-out transform hover:scale-105">
                  {(isSavingDomain || isConfiguringDomain) ? (
                  <>
                    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    {isSavingDomain ? "Salvando Detalhes..." : "Configurando DomÃ­nio..."}
                  </>
                ) : (isEditingDomain ? "Atualizar DomÃ­nio" : "Adicionar DomÃ­nio")}
                </Button>
              </CardFooter>
            </form>
          </Card>

          {/* Table for existing domain configurations */} 
          <Card className="mt-8 w-full bg-gray-800 border border-cyan-500/30 shadow-[0_0_15px_rgba(0,255,255,0.2)]">
            <CardHeader>
                <CardTitle className="text-xl font-semibold text-cyan-300 tracking-wide">ConfiguraÃ§Ãµes de DomÃ­nio Atuais</CardTitle>
            </CardHeader>
            <CardContent>
                {isDomainConfigsLoading ? (
                    <p className="text-gray-400">Carregando configuraÃ§Ãµes...</p>
                ) : Object.keys(domainConfigs).length === 0 ? (
                    <p className="text-gray-400">Nenhuma configuraÃ§Ã£o de domÃ­nio encontrada.</p>
                ) : (
                <div className="overflow-x-auto">
                    <Table className="min-w-full">
                    <TableCaption className="text-gray-400 py-4">Lista de domÃ­nios configurados.</TableCaption>
                    <TableHeader>
                        <TableRow className="border-b border-gray-700 hover:bg-gray-750/50">
                        <TableHead className="text-cyan-400 px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">DomÃ­nio</TableHead>
                        <TableHead className="text-cyan-400 px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">White URL</TableHead>
                        <TableHead className="text-cyan-400 px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">Black URL</TableHead>
                        <TableHead className="text-cyan-400 px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">PaÃ­ses Bloqueados</TableHead>
                        <TableHead className="text-cyan-400 px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">AÃ§Ãµes</TableHead>
                        </TableRow>
                    </TableHeader>
                    <TableBody className="divide-y divide-gray-700">
                        {Object.entries(domainConfigs).map(([domainName, config]) => (
                        <TableRow key={domainName} className="hover:bg-gray-750/50 font-mono text-sm">
                            <TableCell className="px-4 py-3 text-gray-300 whitespace-nowrap">{domainName}</TableCell>
                            <TableCell className="px-4 py-3 text-gray-400 max-w-[200px] truncate" title={config.white_page_url}>{config.white_page_url}</TableCell>
                            <TableCell className="px-4 py-3 text-gray-400 max-w-[200px] truncate" title={config.black_page_url}>{config.black_page_url}</TableCell>
                            <TableCell className="px-4 py-3 text-gray-300 whitespace-nowrap">{(config.blocked_countries || []).join(", ") || "Nenhum"}</TableCell>
                            <TableCell className="px-4 py-3 text-gray-300 whitespace-nowrap space-x-2">
                                <Button variant="outline" size="icon" onClick={() => handleEditDomain(domainName)} className="text-blue-400 hover:text-blue-300 border-blue-400/50 hover:bg-blue-400/10 h-8 w-8">
                                    <Edit3 size={16}/>
                                </Button>
                                <Button variant="outline" size="icon" onClick={() => handleDeleteDomain(domainName)} className="text-red-400 hover:text-red-300 border-red-400/50 hover:bg-red-400/10 h-8 w-8">
                                    <Trash2 size={16}/>
                                </Button>
                            </TableCell>
                        </TableRow>
                        ))}
                    </TableBody>
                    </Table>
                </div>
                )}
            </CardContent>
          </Card>
        </section>
        
                {/* Section for Campaign Management */}
        <section id="campaign-form-section"> {/* Added ID for scrolling */}
          <Card className="w-full bg-gray-800 border border-purple-500/30 shadow-[0_0_15px_rgba(128,0,128,0.2)] hover:shadow-[0_0_25px_rgba(128,0,128,0.35)] transition-shadow duration-300">
            <CardHeader>
              <CardTitle className="text-2xl font-semibold text-purple-300 tracking-wide">
                {isEditModeCampaign ? `Editando Campanha: ${editingCampaignPath}` : "Criar Nova Campanha"}
              </CardTitle>
              <CardDescription className="text-gray-400">
                Defina um path, conteÃºdo White/Black e filtros para sua campanha no domÃ­nio selecionado.
              </CardDescription>
            </CardHeader>
            <form onSubmit={handleSaveCampaign}>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label htmlFor="selectedDomainForCampaigns" className="text-gray-300">DomÃ­nio Associado</Label>
                    <Select
                      value={selectedDomainForCampaigns}
                      onValueChange={(value) => {
                        setSelectedDomainForCampaigns(value);
                        // Reset campaign form if domain changes during creation/editing to avoid inconsistency
                        // and also reset edit mode if it was active for a different domain's campaign.
                        if (isEditModeCampaign && editingCampaignPath) {
                            const campaignBeingEdited = currentCampaigns.find(c => c.path === editingCampaignPath);
                            if (campaignBeingEdited && campaignBeingEdited.domain_name !== value) {
                                handleCancelCampaignEdit();
                            }
                        } else if (!isEditModeCampaign) {
                            // If not in edit mode, always reset form when domain changes
                            handleCancelCampaignEdit();
                        }
                      }}
                      disabled={isSavingCampaign || isLoadingCampaigns || Object.keys(domainConfigs).length === 0}
                    >
                      <SelectTrigger className="w-full bg-gray-700 border-gray-600 text-white focus:ring-purple-500 focus:border-purple-500">
                        <SelectValue placeholder={Object.keys(domainConfigs).length === 0 ? "Nenhum domÃ­nio configurado" : "Selecione um domÃ­nio"} />
                      </SelectTrigger>
                      <SelectContent className="bg-gray-700 text-white border-gray-600">
                        {Object.keys(domainConfigs).map((domain) => (
                          <SelectItem key={domain} value={domain} className="hover:bg-gray-600 focus:bg-gray-600">
                            {domain}
                          </SelectItem>
                        ))}
                        {Object.keys(domainConfigs).length === 0 && (
                            <div className="p-2 text-center text-gray-400">Adicione um domÃ­nio na seÃ§Ã£o acima.</div>
                        )}
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label htmlFor="campaignPath" className="text-gray-300">Path da Campanha (ex: minha-oferta)</Label>
                    <Input
                      id="campaignPath"
                      name="campaignPath"
                      type="text"
                      placeholder="ex: black-friday-2025"
                      value={campaignPath}
                      onChange={(e) => setCampaignPath(e.target.value)}
                      required
                      className="bg-gray-700 border-gray-600 text-white placeholder-gray-500 focus:ring-purple-500 focus:border-purple-500"
                      disabled={isSavingCampaign || isEditModeCampaign}
                    />
                  </div>
                </div>

                <div>
                  <Label htmlFor="campaignWhiteContent" className="text-gray-300">ConteÃºdo White Page (HTML)</Label>
                  <Textarea
                    id="campaignWhiteContent"
                    name="campaignWhiteContent"
                    placeholder="<html><body>PÃ¡gina Segura...</body></html>"
                    value={campaignWhiteContent}
                    onChange={(e) => setCampaignWhiteContent(e.target.value)}
                    required
                    className="bg-gray-700 border-gray-600 text-white placeholder-gray-500 focus:ring-purple-500 focus:border-purple-500 h-48 font-mono text-xs"
                    disabled={isSavingCampaign}
                  />
                </div>
                <div>
                  <Label htmlFor="campaignBlackContent" className="text-gray-300">ConteÃºdo Black Page (HTML)</Label>
                  <Textarea
                    id="campaignBlackContent"
                    name="campaignBlackContent"
                    placeholder="<html><body>PÃ¡gina de Oferta...</body></html>"
                    value={campaignBlackContent}
                    onChange={(e) => setCampaignBlackContent(e.target.value)}
                    required
                    className="bg-gray-700 border-gray-600 text-white placeholder-gray-500 focus:ring-purple-500 focus:border-purple-500 h-48 font-mono text-xs"
                    disabled={isSavingCampaign}
                  />
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label htmlFor="campaignUserAgentFilters" className="text-gray-300">Bloquear User-Agents Contendo (separado por vÃ­rgula)</Label>
                    <Input
                      id="campaignUserAgentFilters"
                      name="campaignUserAgentFilters"
                      type="text"
                      placeholder="Googlebot,Bingbot,AdsBot-Google"
                      value={campaignUserAgentFilters}
                      onChange={(e) => setCampaignUserAgentFilters(e.target.value)}
                      className="bg-gray-700 border-gray-600 text-white placeholder-gray-500 focus:ring-purple-500 focus:border-purple-500"
                      disabled={isSavingCampaign}
                    />
                  </div>
                  <div>
                    <Label htmlFor="campaignCountryFilters" className="text-gray-300">Bloquear PaÃ­ses (cÃ³digos ISO, separado por vÃ­rgula)</Label>
                    <Input
                      id="campaignCountryFilters"
                      name="campaignCountryFilters"
                      type="text"
                      placeholder="CN,RU,KP"
                      value={campaignCountryFilters}
                      onChange={(e) => setCampaignCountryFilters(e.target.value)}
                      className="bg-gray-700 border-gray-600 text-white placeholder-gray-500 focus:ring-purple-500 focus:border-purple-500"
                      disabled={isSavingCampaign}
                    />
                  </div>
                </div>
              </CardContent>
              <CardFooter className="border-t border-gray-700 pt-6 flex justify-end gap-4">
                {isEditModeCampaign && (
                  <Button type="button" variant="outline" onClick={handleCancelCampaignEdit} disabled={isSavingCampaign} className="text-gray-300 border-gray-600 hover:bg-gray-700">
                    Cancelar EdiÃ§Ã£o
                  </Button>
                )}
                <Button 
                  type="submit" 
                  disabled={isSavingCampaign || isLoadingCampaigns || !selectedDomainForCampaigns || (!isEditModeCampaign && !campaignPath.trim())}
                  className="bg-purple-500 hover:bg-purple-400 text-gray-900 font-bold py-3 px-6 rounded-lg shadow-md hover:shadow-purple-500/40 transition-all duration-300 ease-in-out transform hover:scale-105"
                >
                  {isSavingCampaign ? (
                    <>
                      <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Salvando...
                    </>
                  ) : (isEditModeCampaign ? "Atualizar Campanha" : "Criar Campanha")}
                </Button>
              </CardFooter>
            </form>
          </Card>

          {/* Table for existing campaigns */}
          <Card className="mt-8 w-full bg-gray-800 border border-purple-500/30 shadow-[0_0_15px_rgba(128,0,128,0.2)]">
            <CardHeader>
              <CardTitle className="text-xl font-semibold text-purple-300 tracking-wide">Campanhas Ativas para: {selectedDomainForCampaigns || "Nenhum domÃ­nio selecionado"}</CardTitle>
            </CardHeader>
            <CardContent>
              {isLoadingCampaigns ? (
                <p className="text-gray-400">Carregando campanhas...</p>
              ) : !selectedDomainForCampaigns ? (
                 <p className="text-gray-400">Selecione um domÃ­nio acima para ver ou criar campanhas.</p>
              ) : currentCampaigns.length === 0 ? (
                <p className="text-gray-400">Nenhuma campanha encontrada para este domÃ­nio.</p>
              ) : (
                <div className="overflow-x-auto">
                  <Table className="min-w-full">
                    <TableCaption className="text-gray-400 py-4">Lista de campanhas configuradas para o domÃ­nio selecionado.</TableCaption>
                    <TableHeader>
                      <TableRow className="border-b border-gray-700 hover:bg-gray-750/50">
                        <TableHead className="text-purple-400 px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">Path</TableHead>
                        <TableHead className="text-purple-400 px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">Filtros User-Agent</TableHead>
                        <TableHead className="text-purple-400 px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">Filtros PaÃ­s</TableHead>
                        <TableHead className="text-purple-400 px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">Atualizada em</TableHead>
                        <TableHead className="text-purple-400 px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">AÃ§Ãµes</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody className="divide-y divide-gray-700">
                      {currentCampaigns.map((campaign) => (
                        <TableRow key={campaign.path} className="hover:bg-gray-750/50 font-mono text-sm">
                          <TableCell className="px-4 py-3 text-gray-300 whitespace-nowrap">/{campaign.path}</TableCell>
                          <TableCell className="px-4 py-3 text-gray-400 max-w-[200px] truncate" title={(campaign.filters.user_agent_contains_block || []).join(", ")}>
                            {(campaign.filters.user_agent_contains_block || []).join(", ") || "Nenhum"}
                          </TableCell>
                          <TableCell className="px-4 py-3 text-gray-400 max-w-[150px] truncate" title={(campaign.filters.geo_country_block || []).join(", ")}>
                            {(campaign.filters.geo_country_block || []).join(", ") || "Nenhum"}
                          </TableCell>
                          <TableCell className="px-4 py-3 text-gray-300 whitespace-nowrap">
                            {campaign.updated_at ? new Date(campaign.updated_at).toLocaleString() : "N/A"}
                          </TableCell>
                          <TableCell className="px-4 py-3 text-gray-300 whitespace-nowrap space-x-2">
                            <Button variant="outline" size="icon" onClick={() => handleEditCampaignClick(campaign)} className="text-blue-400 hover:text-blue-300 border-blue-400/50 hover:bg-blue-400/10 h-8 w-8" title="Editar Campanha">
                                <Edit3 size={16}/>
                            </Button>
                            <Button variant="outline" size="icon" onClick={() => handleDeleteCampaign(campaign.domain_name, campaign.path)} disabled={isSavingCampaign} className="text-red-400 hover:text-red-300 border-red-400/50 hover:bg-red-400/10 h-8 w-8" title="Excluir Campanha">
                                <Trash2 size={16}/>
                            </Button>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              )}
            </CardContent>
          </Card>
        </section>
        
        {/* Section for Access Logs (Placeholder) */}
        <section id="access-logs">
          <Card className="w-full bg-gray-800 border border-purple-500/30 shadow-[0_0_15px_rgba(128,0,128,0.2)] hover:shadow-[0_0_25px_rgba(128,0,128,0.35)] transition-shadow duration-300">
            <CardHeader>
              <CardTitle className="text-2xl font-semibold text-purple-300 tracking-wide">Gerenciamento de Campanhas</CardTitle>
              <CardDescription className="text-gray-400">
                Crie e gerencie paths (campanhas) para seus domÃ­nios configurados. O conteÃºdo White/Black e filtros sÃ£o definidos por campanha.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {Object.keys(domainConfigs).length === 0 ? (
                <p className="text-center text-gray-400">Nenhum domÃ­nio principal configurado. Adicione e configure um domÃ­nio acima para criar campanhas.</p>
              ) : (
                <form onSubmit={handleSaveCampaign}>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                    <div className="space-y-2">
                      <Label htmlFor="selectedDomainForCampaigns" className="text-gray-300">DomÃ­nio Principal</Label>
                      <Select
                        value={selectedDomainForCampaigns}
                        onValueChange={setSelectedDomainForCampaigns}
                        disabled={isSavingCampaign || Object.keys(domainConfigs).length === 0}
                      >
                        <SelectTrigger className="w-full bg-gray-700 border-gray-600 text-white focus:ring-purple-500 focus:border-purple-500">
                          <SelectValue placeholder="Selecione um domÃ­nio configurado" />
                        </SelectTrigger>
                        <SelectContent className="bg-gray-700 text-white border-gray-600">
                          {Object.keys(domainConfigs).map((domain) => (
                            <SelectItem key={domain} value={domain} className="hover:bg-gray-600 focus:bg-gray-600">
                              {domain}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="campaignPath" className="text-gray-300">Path da Campanha (ex: minha-oferta)</Label>
                      <Input
                        id="campaignPath"
                        name="campaignPath"
                        type="text"
                        placeholder="oferta-especial-xyz"
                        value={campaignPath}
                        onChange={(e) => setCampaignPath(e.target.value.trim().replace(/^\/+/, '').replace(/\s+/g, '-').toLowerCase())}
                        required
                        className="bg-gray-700 border-gray-600 text-white placeholder-gray-500 focus:ring-purple-500 focus:border-purple-500"
                        disabled={isSavingCampaign || !selectedDomainForCampaigns}
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                    <div className="space-y-2">
                      <Label htmlFor="campaignWhiteContent" className="text-gray-300">ConteÃºdo White Page (HTML)</Label>
                      <Textarea
                        id="campaignWhiteContent"
                        name="campaignWhiteContent"
                        placeholder="<html><body>PÃ¡gina Segura...</body></html>"
                        value={campaignWhiteContent}
                        onChange={(e) => setCampaignWhiteContent(e.target.value)}
                        required
                        className="bg-gray-700 border-gray-600 text-white placeholder-gray-500 focus:ring-purple-500 focus:border-purple-500 h-48 font-mono text-xs"
                        disabled={isSavingCampaign || !selectedDomainForCampaigns}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="campaignBlackContent" className="text-gray-300">ConteÃºdo Black Page (HTML)</Label>
                      <Textarea
                        id="campaignBlackContent"
                        name="campaignBlackContent"
                        placeholder="<html><body>PÃ¡gina de Oferta...</body></html>"
                        value={campaignBlackContent}
                        onChange={(e) => setCampaignBlackContent(e.target.value)}
                        required
                        className="bg-gray-700 border-gray-600 text-white placeholder-gray-500 focus:ring-purple-500 focus:border-purple-500 h-48 font-mono text-xs"
                        disabled={isSavingCampaign || !selectedDomainForCampaigns}
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                     <div className="space-y-2">
                        <Label htmlFor="campaignUserAgentFilters" className="text-gray-300">User-Agents a Bloquear (separados por vÃ­rgula)</Label>
                        <Input
                            id="campaignUserAgentFilters"
                            name="campaignUserAgentFilters"
                            type="text"
                            placeholder="Googlebot,Bingbot,etc"
                            value={campaignUserAgentFilters}
                            onChange={(e) => setCampaignUserAgentFilters(e.target.value)}
                            className="bg-gray-700 border-gray-600 text-white placeholder-gray-500 focus:ring-purple-500 focus:border-purple-500"
                            disabled={isSavingCampaign || !selectedDomainForCampaigns}
                        />
                    </div>
                    <div className="space-y-2">
                        <Label htmlFor="campaignCountryFilters" className="text-gray-300">PaÃ­ses a Bloquear (cÃ³digos ISO, separados por vÃ­rgula)</Label>
                        <Input
                            id="campaignCountryFilters"
                            name="campaignCountryFilters"
                            type="text"
                            placeholder="CN,RU,KP"
                            value={campaignCountryFilters}
                            onChange={(e) => setCampaignCountryFilters(e.target.value)}
                            className="bg-gray-700 border-gray-600 text-white placeholder-gray-500 focus:ring-purple-500 focus:border-purple-500"
                            disabled={isSavingCampaign || !selectedDomainForCampaigns}
                        />
                    </div>
                  </div>
                  <CardFooter className="border-t border-gray-700 pt-6 mt-6 flex justify-end gap-4">
                     <Button type="submit" disabled={isSavingCampaign || !selectedDomainForCampaigns || !campaignPath} className="bg-purple-500 hover:bg-purple-400 text-gray-900 font-bold py-3 px-6 rounded-lg shadow-md hover:shadow-purple-500/40 transition-all duration-300 ease-in-out transform hover:scale-105">
                        {isSavingCampaign ? (
                            <><svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>Salvando...</>
                        ) : editingCampaignPath ? (<><Edit3 size={18} className="mr-2" /> Atualizar Campanha</>) : (<><PlusCircle size={18} className="mr-2" /> Criar Nova Campanha</>)}
                     </Button>
                  </CardFooter>
                </form>
              )}
            </CardContent>
            {/* Table for existing campaigns */}
            {selectedDomainForCampaigns && (
              <div className="mt-8 px-6 pb-6">
                <h3 className="text-xl font-semibold text-purple-200 mb-4">Campanhas para: {selectedDomainForCampaigns}</h3>
                {isLoadingCampaigns ? (
                  <div className="flex justify-center items-center py-8">
                    <svg className="animate-spin h-8 w-8 text-purple-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>
                    <p className="ml-3 text-gray-400">Carregando campanhas...</p>
                  </div>
                ) : currentCampaigns.length > 0 ? (
                  <div className="overflow-x-auto rounded-lg border border-gray-700 shadow-lg bg-gray-800/30">
                    <Table className="min-w-full">
                      <TableCaption className="text-gray-400 py-4 bg-gray-800/50 border-t border-gray-700">Lista de campanhas configuradas para o domÃ­nio selecionado.</TableCaption>
                      <TableHeader>
                        <TableRow className="border-b border-gray-700 hover:bg-gray-750/50 bg-gray-700/30">
                          <TableHead className="text-purple-400 px-4 py-3">Path</TableHead>
                          <TableHead className="text-purple-400 px-4 py-3">White Content (HTML)</TableHead>
                          <TableHead className="text-purple-400 px-4 py-3">Black Content (HTML)</TableHead>
                          <TableHead className="text-purple-400 px-4 py-3">Filtros User-Agent</TableHead>
                          <TableHead className="text-purple-400 px-4 py-3">Filtros PaÃ­ses</TableHead>
                          <TableHead className="text-purple-400 px-4 py-3">Criada em</TableHead>
                          <TableHead className="text-purple-400 px-4 py-3">Atualizada em</TableHead>
                          <TableHead className="text-purple-400 px-4 py-3">AÃ§Ãµes</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody className="divide-y divide-gray-700">
                        {currentCampaigns.map((campaign) => (
                          <TableRow key={campaign.path} className="hover:bg-gray-750/50 font-mono text-sm">
                            <TableCell className="px-4 py-3 text-gray-300">/{campaign.path}</TableCell>
                            <TableCell className="px-4 py-3 text-gray-400 max-w-[150px] truncate" title={campaign.white_content}>{campaign.white_content}</TableCell>
                            <TableCell className="px-4 py-3 text-gray-400 max-w-[150px] truncate" title={campaign.black_content}>{campaign.black_content}</TableCell>
                            <TableCell className="px-4 py-3 text-gray-300">{(campaign.filters.user_agent_contains_block || []).join(", ") || "N/A"}</TableCell>
                            <TableCell className="px-4 py-3 text-gray-300">{(campaign.filters.geo_country_block || []).join(", ") || "N/A"}</TableCell>
                            <TableCell className="px-4 py-3 text-gray-300">{new Date(campaign.created_at).toLocaleString()}</TableCell>
                            <TableCell className="px-4 py-3 text-gray-300">{new Date(campaign.updated_at).toLocaleString()}</TableCell>
                            <TableCell className="px-4 py-3 text-gray-300 space-x-2">
                              <Button variant="outline" size="icon" onClick={() => {/* TODO: handleEditCampaign(campaign) */}} className="text-blue-400 hover:text-blue-300 border-blue-400/50 hover:bg-blue-400/10 h-8 w-8">
                                <Edit3 size={16} />
                              </Button>
                              <Button variant="outline" size="icon" onClick={() => {/* TODO: handleDeleteCampaign(campaign.path) */}} className="text-red-400 hover:text-red-300 border-red-400/50 hover:bg-red-400/10 h-8 w-8">
                                <Trash2 size={16} />
                              </Button>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </div>
                ) : (
                 <p className="text-center text-gray-400 py-8">Nenhuma campanha encontrada para o domÃ­nio {selectedDomainForCampaigns}. Crie uma acima!</p>
                )}
              </div>
            )}
          </Card>
        </section>

        {/* Section for Cloudflare Turnstile (Unchanged) */}
        <section id="turnstile-verification">
          <Card className="w-full bg-gray-800 border border-cyan-500/30 shadow-[0_0_15px_rgba(0,255,255,0.2)] hover:shadow-[0_0_25px_rgba(0,255,255,0.35)] transition-shadow duration-300">
            <CardHeader>
              <CardTitle className="text-2xl font-semibold text-cyan-300 tracking-wide">VerificaÃ§Ã£o de SeguranÃ§a (Turnstile)</CardTitle>
              <CardDescription className="text-gray-400">
                Complete o desafio abaixo para provar que vocÃª nÃ£o Ã© um robÃ´.
              </CardDescription>
            </CardHeader>
            <CardContent className="flex justify-center items-center py-8">
              {isTurnstileScriptLoaded ? (
                <div id="turnstile-widget-container" className="cf-turnstile" data-sitekey="0x4AAAAAABeN7EeFcxsslk_G" data-callback="handleTurnstileSuccess"></div>
              ) : (
                <p className="text-gray-400">Carregando widget de verificaÃ§Ã£o...</p>
              )}
            </CardContent>
          </Card>
        </section>

        {/* Section for Recent Activity Log (Unchanged) */}
        <section id="recent-activity">
          <Card className="w-full bg-gray-800 border border-cyan-500/30 shadow-[0_0_15px_rgba(0,255,255,0.2)] hover:shadow-[0_0_25px_rgba(0,255,255,0.35)] transition-shadow duration-300">
            <CardHeader>
              <CardTitle className="text-2xl font-semibold text-cyan-300 tracking-wide">Log de Atividade Recente</CardTitle>
              <CardDescription className="text-gray-400">
                VisualizaÃ§Ã£o dos Ãºltimos acessos e decisÃµes do sistema (dados mockados para Fase 1).
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="overflow-x-auto">
                <Table className="min-w-full">
                  <TableCaption className="text-gray-400 py-4">Logs de acesso recentes. Os dados sÃ£o mockados para esta fase.</TableCaption>
                  <TableHeader>
                    <TableRow className="border-b border-gray-700 hover:bg-gray-750/50">
                      <TableHead className="text-cyan-400 px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">Timestamp</TableHead>
                      <TableHead className="text-cyan-400 px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">IP (Hash)</TableHead>
                      <TableHead className="text-cyan-400 px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">User-Agent</TableHead>
                      <TableHead className="text-cyan-400 px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">Status</TableHead>
                      <TableHead className="text-cyan-400 px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">URL Destino</TableHead>
                      <TableHead className="text-cyan-400 px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">Motivo</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody className="divide-y divide-gray-700">
                    {mockAccessLogs.map((log) => (
                      <TableRow key={log.id} className="hover:bg-gray-750/50 font-mono text-sm">
                        <TableCell className="px-4 py-3 text-gray-300 whitespace-nowrap">{log.timestamp}</TableCell>
                        <TableCell className="px-4 py-3 text-gray-300 whitespace-nowrap">{log.ipAddress}</TableCell>
                        <TableCell className="px-4 py-3 text-gray-400 max-w-[200px] md:max-w-xs truncate" title={log.userAgent}>{log.userAgent}</TableCell>
                        <TableCell className="px-4 py-3 whitespace-nowrap">
                          <span
                            className={`px-2 py-1 text-xs font-semibold rounded-full leading-tight ${log.status === "Permitido - Humano"
                                ? "bg-green-600/30 text-green-300"
                                : log.status === "Bloqueado - Bot"
                                  ? "bg-red-600/30 text-red-300"
                                  : "bg-yellow-600/30 text-yellow-300"
                              }`}
                          >
                            {log.status}
                          </span>
                        </TableCell>
                        <TableCell className="px-4 py-3 text-gray-300 whitespace-nowrap">{log.destinationUrl}</TableCell>
                        <TableCell className="px-4 py-3 text-gray-400 whitespace-nowrap">{log.reason || "-"}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            </CardContent>
          </Card>
        </section>
         {/* Remove or comment out the old global URL config section */}
         {/* 
        <section id="url-configuration">
          <Card className="w-full bg-gray-800 border border-cyan-500/30 shadow-[0_0_15px_rgba(0,255,255,0.2)] hover:shadow-[0_0_25px_rgba(0,255,255,0.35)] transition-shadow duration-300">
            <CardHeader>
              <CardTitle className="text-2xl font-semibold text-cyan-300 tracking-wide">ConfiguraÃ§Ã£o de URLs de Cloaking Global (Obsoleto)</CardTitle>
              <CardDescription className="text-gray-400">
                Esta seÃ§Ã£o serÃ¡ removida. As configuraÃ§Ãµes agora sÃ£o por domÃ­nio.
              </CardDescription>
            </CardHeader>
          </Card>
        </section>
        */}
      </div>
    </div>
  );
};

const DashboardPage: React.FC = () => {
  return (
    <LoginRequiredPage>
      <DashboardContent />
    </LoginRequiredPage>
  );
};

export default DashboardPage;
